<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="165" passed="165" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-07-30T15:18:20 CEST" name="Surefire suite" finished-at="2020-07-30T15:18:24 CEST" duration-ms="4189">
    <groups>
    </groups>
    <test started-at="2020-07-30T15:18:20 CEST" name="Surefire test" finished-at="2020-07-30T15:18:24 CEST" duration-ms="4189">
      <class name="com.hotels.transformer.cache.CacheManagerTest">
        <test-method signature="testCacheObjectStoresTheDefaultValueIfTheGivenObjectIsNull()[pri:0, instance:com.hotels.transformer.cache.CacheManagerTest@53c6f96d]" started-at="2020-07-30T15:18:22 CEST" name="testCacheObjectStoresTheDefaultValueIfTheGivenObjectIsNull" finished-at="2020-07-30T15:18:22 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheObjectStoresTheDefaultValueIfTheGivenObjectIsNull -->
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.transformer.cache.CacheManagerTest@53c6f96d]" started-at="2020-07-30T15:18:22 CEST" name="beforeClass" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testCacheObjectStoresTheGivenObjectWithTheGivenKey()[pri:0, instance:com.hotels.transformer.cache.CacheManagerTest@53c6f96d]" started-at="2020-07-30T15:18:22 CEST" name="testCacheObjectStoresTheGivenObjectWithTheGivenKey" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCacheObjectStoresTheGivenObjectWithTheGivenKey -->
        <test-method signature="testRemoveFromCacheRemovesTheObject()[pri:0, instance:com.hotels.transformer.cache.CacheManagerTest@53c6f96d]" started-at="2020-07-30T15:18:22 CEST" name="testRemoveFromCacheRemovesTheObject" finished-at="2020-07-30T15:18:22 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFromCacheRemovesTheObject -->
        <test-method signature="testRemoveMatchingKeysFromCacheRemovesTheObject()[pri:0, instance:com.hotels.transformer.cache.CacheManagerTest@53c6f96d]" started-at="2020-07-30T15:18:22 CEST" name="testRemoveMatchingKeysFromCacheRemovesTheObject" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveMatchingKeysFromCacheRemovesTheObject -->
      </class> <!-- com.hotels.transformer.cache.CacheManagerTest -->
      <class name="com.hotels.transformer.utils.ClassUtilsTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:22 CEST" name="beforeClass" finished-at="2020-07-30T15:18:22 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testAllParameterAnnotatedWithWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:22 CEST" name="testAllParameterAnnotatedWithWorksAsExpected" data-provider="dataNotAllParameterAnnotatedWithTesting" finished-at="2020-07-30T15:18:22 CEST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if all constructor's parameter are annotated with @ConstructorArg]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[interface com.hotels.transformer.annotation.ConstructorArg]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAllParameterAnnotatedWithWorksAsExpected -->
        <test-method signature="testAllParameterAnnotatedWithWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:22 CEST" name="testAllParameterAnnotatedWithWorksAsExpected" data-provider="dataNotAllParameterAnnotatedWithTesting" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if not all constructor's parameter are annotated with @NotNull]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[interface javax.validation.constraints.NotNull]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAllParameterAnnotatedWithWorksAsExpected -->
        <test-method signature="testAreParameterNamesAvailableWorksAsExpected(java.lang.String, java.lang.reflect.Constructor, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testAreParameterNamesAvailableWorksAsExpected" data-provider="dataAreParameterNamesAvailableTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="40" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the constructor parameter names are not available]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[Mock for Constructor, hashCode: 1403282300]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAreParameterNamesAvailableWorksAsExpected -->
        <test-method signature="testAreParameterNamesAvailableWorksAsExpected(java.lang.String, java.lang.reflect.Constructor, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testAreParameterNamesAvailableWorksAsExpected" data-provider="dataAreParameterNamesAvailableTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the constructor parameter names are available]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[public com.hotels.beans.sample.mixed.MixedToFoo(java.math.BigInteger,java.lang.String,java.util.List,java.util.List,com.hotels.beans.sample.immutable.ImmutableToSubFoo)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAreParameterNamesAvailableWorksAsExpected -->
        <test-method signature="testGetAllArgsConstructorWorksAsExpected()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetAllArgsConstructorWorksAsExpected" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetAllArgsConstructorWorksAsExpected -->
        <test-method signature="testGetBuildMethodReturnsTheBuildMethod()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetBuildMethodReturnsTheBuildMethod" finished-at="2020-07-30T15:18:23 CEST" duration-ms="38" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetBuildMethodReturnsTheBuildMethod -->
        <test-method signature="testGetBuildMethodThrowsExceptionIfMethodIsMissing(java.lang.String, java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetBuildMethodThrowsExceptionIfMethodIsMissing" data-provider="dataGetBuilderMethodExceptionTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="9" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method raises a MissingMethodException if the class has no builder build method]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
          </params>
          <exception class="com.hotels.transformer.error.MissingMethodException">
            <message>
              <![CDATA[No Builder build method defined for class: com.hotels.beans.sample.immutable.ImmutableToFoo.]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.MissingMethodException: No Builder build method defined for class: com.hotels.beans.sample.immutable.ImmutableToFoo.
at com.hotels.transformer.utils.ClassUtils.lambda$getBuildMethod$19(ClassUtils.java:517)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ClassUtils.getBuildMethod(ClassUtils.java:507)
at com.hotels.transformer.utils.ClassUtilsTest.testGetBuildMethodThrowsExceptionIfMethodIsMissing(ClassUtilsTest.java:1012)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.MissingMethodException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetBuildMethodThrowsExceptionIfMethodIsMissing -->
        <test-method signature="testGetBuildMethodThrowsExceptionIfMethodIsMissing(java.lang.String, java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetBuildMethodThrowsExceptionIfMethodIsMissing" data-provider="dataGetBuilderMethodExceptionTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method raises a MissingMethodException if the class has a builder build method that does not return the parent class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithWrongBuilder]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithWrongBuilder$Builder]]>
              </value>
            </param>
          </params>
          <exception class="com.hotels.transformer.error.MissingMethodException">
            <message>
              <![CDATA[Invalid build method definition. It must returns a: com.hotels.beans.sample.mutable.MutableToFooWithWrongBuilder]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.MissingMethodException: Invalid build method definition. It must returns a: com.hotels.beans.sample.mutable.MutableToFooWithWrongBuilder
at com.hotels.transformer.utils.ClassUtils.lambda$getBuildMethod$19(ClassUtils.java:511)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ClassUtils.getBuildMethod(ClassUtils.java:507)
at com.hotels.transformer.utils.ClassUtilsTest.testGetBuildMethodThrowsExceptionIfMethodIsMissing(ClassUtilsTest.java:1012)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.MissingMethodException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetBuildMethodThrowsExceptionIfMethodIsMissing -->
        <test-method signature="testGetClassTypeWorksAsExpected(java.lang.String, java.lang.Class, com.hotels.transformer.constant.ClassType)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetClassTypeWorksAsExpected" data-provider="dataGetClassTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="37" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns immutable if the given class is immutable]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[IMMUTABLE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetClassTypeWorksAsExpected -->
        <test-method signature="testGetClassTypeWorksAsExpected(java.lang.String, java.lang.Class, com.hotels.transformer.constant.ClassType)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetClassTypeWorksAsExpected" data-provider="dataGetClassTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns mutable if the given class is mutable]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MUTABLE]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetClassTypeWorksAsExpected -->
        <test-method signature="testGetClassTypeWorksAsExpected(java.lang.String, java.lang.Class, com.hotels.transformer.constant.ClassType)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetClassTypeWorksAsExpected" data-provider="dataGetClassTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns mixed if the given class contains both final and not fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[MIXED]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetClassTypeWorksAsExpected -->
        <test-method signature="testGetConcreteClassWorksAsExpected(java.lang.String, java.lang.Class, java.util.Optional)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetConcreteClassWorksAsExpected" data-provider="dataGetBuilderClassTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the builder class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithBuilder]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Optional[class com.hotels.beans.sample.mutable.MutableToFooWithBuilder$Builder]]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConcreteClassWorksAsExpected -->
        <test-method signature="testGetConcreteClassWorksAsExpected(java.lang.String, java.lang.Class, java.util.Optional)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetConcreteClassWorksAsExpected" data-provider="dataGetBuilderClassTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns an empty optional if the class has no builder]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Optional.empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConcreteClassWorksAsExpected -->
        <test-method signature="testGetConcreteClassWorksAsExpected(java.lang.String, java.lang.Class, java.util.Optional)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetConcreteClassWorksAsExpected" data-provider="dataGetBuilderClassTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns an empty optional if the class has a wrong builder]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithWrongBuilder]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Optional.empty]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConcreteClassWorksAsExpected -->
        <test-method signature="testGetConcreteClassWorksAsExpected(java.lang.String, java.lang.reflect.Field, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetConcreteClassWorksAsExpected" data-provider="dataGetConcreteClassTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns Object if the field value is null]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[private final java.util.List com.hotels.beans.sample.FromFoo.list]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.lang.Object]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConcreteClassWorksAsExpected -->
        <test-method signature="testGetConcreteClassWorksAsExpected(java.lang.String, java.lang.reflect.Field, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetConcreteClassWorksAsExpected" data-provider="dataGetConcreteClassTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns LinkedList if the concrete field class is a LinkedList]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[private final java.util.List com.hotels.beans.sample.FromFoo.list]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[[]]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.util.LinkedList]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConcreteClassWorksAsExpected -->
        <test-method signature="testGetConstructorParameters()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetConstructorParameters" finished-at="2020-07-30T15:18:23 CEST" duration-ms="71" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConstructorParameters -->
        <test-method signature="testGetDeclaredClassesWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredClassesWorksAsExpected" data-provider="dataGetDeclaredClassesTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the a manual declared Builder is returned by method: {@code getDeclaredClasses}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithBuilder]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithBuilder$Builder]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredClassesWorksAsExpected -->
        <test-method signature="testGetDeclaredClassesWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredClassesWorksAsExpected" data-provider="dataGetDeclaredClassesTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the a Builder created by lombok is returned by method: {@code getDeclaredClasses}]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFooWithBuilder]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFooWithBuilder$MixedToFooWithBuilderBuilder]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredClassesWorksAsExpected -->
        <test-method signature="testGetDeclaredFieldsWorksAsExpected(java.lang.String, java.lang.Class, boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldsWorksAsExpected" data-provider="dataGetDeclaredFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="22" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected total number of fields when the skipStatic param is true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFooStaticField]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldsWorksAsExpected -->
        <test-method signature="testGetDeclaredFieldsWorksAsExpected(java.lang.String, java.lang.Class, boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldsWorksAsExpected" data-provider="dataGetDeclaredFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields only]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFooStaticField]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldsWorksAsExpected -->
        <test-method signature="testGetDeclaredFieldsWorksAsExpected(java.lang.String, java.lang.Class, boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldsWorksAsExpected" data-provider="dataGetDeclaredFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected total number of fields when the skipStatic param is true and the class extends another class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldsWorksAsExpected -->
        <test-method signature="testGetDefaultTypeValueWorksAsExpected()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetDefaultTypeValueWorksAsExpected" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDefaultTypeValueWorksAsExpected -->
        <test-method signature="testGetFieldClassWorksAsExpected()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetFieldClassWorksAsExpected" finished-at="2020-07-30T15:18:23 CEST" duration-ms="96" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldClassWorksAsExpected -->
        <test-method signature="testGetGetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetGetterMethodsWorksAsExpected" data-provider="dataGetGetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns an empty list if the class has no getter methods]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFooSimpleNoGetters]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodsWorksAsExpected -->
        <test-method signature="testGetGetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetGetterMethodsWorksAsExpected" data-provider="dataGetGetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns only the getter methods discarding the not valid one]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFooAdvFields]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[11]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodsWorksAsExpected -->
        <test-method signature="testGetGetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetGetterMethodsWorksAsExpected" data-provider="dataGetGetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the boolean getter method too]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFooSimple]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[3]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodsWorksAsExpected -->
        <test-method signature="testGetGetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetGetterMethodsWorksAsExpected" data-provider="dataGetGetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the getter methods from parent class too]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodsWorksAsExpected -->
        <test-method signature="testGetInstanceRaisesAnInstanceCreationExceptionIfAnErrorOccurs()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetInstanceRaisesAnInstanceCreationExceptionIfAnErrorOccurs" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <exception class="com.hotels.transformer.error.InstanceCreationException">
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InstanceCreationException
at com.hotels.transformer.utils.ClassUtils.getInstance(ClassUtils.java:535)
at com.hotels.transformer.utils.ClassUtilsTest.testGetInstanceRaisesAnInstanceCreationExceptionIfAnErrorOccurs(ClassUtilsTest.java:568)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.InstantiationException
at java.base/jdk.internal.reflect.InstantiationExceptionConstructorAccessorImpl.newInstance(InstantiationExceptionConstructorAccessorImpl.java:48)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at com.hotels.transformer.utils.ClassUtils.getInstance(ClassUtils.java:533)
... 34 more
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InstanceCreationException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetInstanceRaisesAnInstanceCreationExceptionIfAnErrorOccurs -->
        <test-method signature="testGetNoArgsConstructorThrowsExceptionIfTheConstructorIsMissing()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetNoArgsConstructorThrowsExceptionIfTheConstructorIsMissing" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <exception class="com.hotels.transformer.error.InvalidBeanException">
            <message>
              <![CDATA[No default constructors available for class: com.hotels.beans.sample.mixed.MixedToFooMissingConstructor]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidBeanException: No default constructors available for class: com.hotels.beans.sample.mixed.MixedToFooMissingConstructor
at com.hotels.transformer.utils.ClassUtils.lambda$getNoArgsConstructor$20(ClassUtils.java:559)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ClassUtils.getNoArgsConstructor(ClassUtils.java:549)
at com.hotels.transformer.utils.ClassUtilsTest.testGetNoArgsConstructorThrowsExceptionIfTheConstructorIsMissing(ClassUtilsTest.java:541)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidBeanException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNoArgsConstructorThrowsExceptionIfTheConstructorIsMissing -->
        <test-method signature="testGetNoArgsConstructorWorksAsExpected()[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetNoArgsConstructorWorksAsExpected" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNoArgsConstructorWorksAsExpected -->
        <test-method signature="testGetNotFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetNotFinalFieldsWorksAsExpected" data-provider="dataGetNotFinalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns 0 if the given class has only private fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNotFinalFieldsWorksAsExpected -->
        <test-method signature="testGetNotFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetNotFinalFieldsWorksAsExpected" data-provider="dataGetNotFinalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetNotFinalFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private and public fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private and public fields and skipFinal is not passed as param]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[4]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields only]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields only and skipFinal is not passed as param]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class extends another class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class extends another class and skipFinal is not passed as param]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.lang.Boolean, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFieldsWorksAsExpected" data-provider="dataGetPrivateFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the skipFinal is enabled]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFinalFieldsWorksAsExpected" data-provider="dataGetPrivateFinalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns 0 if the given class has no private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFinalFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFinalFieldsWorksAsExpected" data-provider="dataGetPrivateFinalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFinalFieldsWorksAsExpected -->
        <test-method signature="testGetPrivateFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetPrivateFinalFieldsWorksAsExpected" data-provider="dataGetPrivateFinalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields and extends another class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[9]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrivateFinalFieldsWorksAsExpected -->
        <test-method signature="testGetSetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetSetterMethodsWorksAsExpected" data-provider="dataGetSetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns an empty list if the class has no setter methods]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSetterMethodsWorksAsExpected -->
        <test-method signature="testGetSetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetSetterMethodsWorksAsExpected" data-provider="dataGetSetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns a not empty list if the class has setter methods]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSetterMethodsWorksAsExpected -->
        <test-method signature="testGetTotalFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.util.function.Predicate, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetTotalFieldsWorksAsExpected" data-provider="dataGetTotalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="10" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns 0 if the given class has no private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[com.hotels.transformer.utils.ClassUtilsTest$$Lambda$102/0x0000000800154040@32180efb]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTotalFieldsWorksAsExpected -->
        <test-method signature="testGetTotalFieldsWorksAsExpected(java.lang.String, java.lang.Class, java.util.function.Predicate, int)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testGetTotalFieldsWorksAsExpected" data-provider="dataGetTotalFieldsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the expected value if the class has private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[com.hotels.transformer.utils.ClassUtilsTest$$Lambda$102/0x0000000800154040@32180efb]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[5]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTotalFieldsWorksAsExpected -->
        <test-method signature="testHasAccessibleConstructorsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasAccessibleConstructorsWorksAsExpected" data-provider="dataHasAccessibleConstructorsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the constructor is public]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasAccessibleConstructorsWorksAsExpected -->
        <test-method signature="testHasAccessibleConstructorsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasAccessibleConstructorsWorksAsExpected" data-provider="dataHasAccessibleConstructorsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the constructor is private]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithBuilder]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasAccessibleConstructorsWorksAsExpected -->
        <test-method signature="testHasFieldWorksAsExpected(java.lang.String, java.lang.String, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasFieldWorksAsExpected" data-provider="dataHasFieldTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the given field does not exists]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[notExistingFieldName]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasFieldWorksAsExpected -->
        <test-method signature="testHasFieldWorksAsExpected(java.lang.String, java.lang.String, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasFieldWorksAsExpected" data-provider="dataHasFieldTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the given field exists]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[name]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasFieldWorksAsExpected -->
        <test-method signature="testHasPrivateFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasPrivateFinalFieldsWorksAsExpected" data-provider="dataHasFinalFieldTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the given class has private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasPrivateFinalFieldsWorksAsExpected -->
        <test-method signature="testHasPrivateFinalFieldsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasPrivateFinalFieldsWorksAsExpected" data-provider="dataHasFinalFieldTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the given class has no private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooSubClass]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasPrivateFinalFieldsWorksAsExpected -->
        <test-method signature="testHasSetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasSetterMethodsWorksAsExpected" data-provider="dataHasSetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the given class has private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasSetterMethodsWorksAsExpected -->
        <test-method signature="testHasSetterMethodsWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testHasSetterMethodsWorksAsExpected" data-provider="dataHasSetterMethodsTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the given class has no private final fields]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHasSetterMethodsWorksAsExpected -->
        <test-method signature="testIsBigDecimalWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsBigDecimalWorksAsExpected" data-provider="dataIsBigDecimalTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a BigDecimal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBigDecimalWorksAsExpected -->
        <test-method signature="testIsBigDecimalWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsBigDecimalWorksAsExpected" data-provider="dataIsBigDecimalTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a BigDecimal]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigInteger]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBigDecimalWorksAsExpected -->
        <test-method signature="testIsBigIntegerWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsBigIntegerWorksAsExpected" data-provider="dataIsBigIntegerTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a BigInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigInteger]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBigIntegerWorksAsExpected -->
        <test-method signature="testIsBigIntegerWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsBigIntegerWorksAsExpected" data-provider="dataIsBigIntegerTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a BigInteger]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBigIntegerWorksAsExpected -->
        <test-method signature="testIsBiteArrayWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsBiteArrayWorksAsExpected" data-provider="dataIsByteArrayTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a byte[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class [B]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBiteArrayWorksAsExpected -->
        <test-method signature="testIsBiteArrayWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsBiteArrayWorksAsExpected" data-provider="dataIsByteArrayTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a byte[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[byte]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsBiteArrayWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type int[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@20ed6de]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type short[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[S@6ea0dfaa]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type char[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[C@5852605c]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type byte[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[B@2acfd27b]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type double[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[D@5e8359da]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type float[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[F@36b6802f]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type long[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[J@7d2d5625]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the array is of type Integer[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Integer;@29a51ff1]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveArrayTypeWorksAsExpected(java.lang.String, java.lang.Object, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveArrayTypeWorksAsExpected" data-provider="dataPrimitiveArrayTypeTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the array is of type FromFoo[]]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Lcom.hotels.beans.sample.FromFoo;@6dacde96]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveArrayTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveOrSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveOrSpecialTypeWorksAsExpected" data-provider="dataPrimitiveOrSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a primitive or special type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.util.Locale]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveOrSpecialTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveOrSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveOrSpecialTypeWorksAsExpected" data-provider="dataPrimitiveOrSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is a primitive nor a special type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveOrSpecialTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveOrSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveOrSpecialTypeWorksAsExpected" data-provider="dataPrimitiveOrSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a primitive nor a special type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveOrSpecialTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveOrSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveOrSpecialTypeWorksAsExpected" data-provider="dataPrimitiveOrSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is null]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveOrSpecialTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a primitive type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a primitive type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a Character]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.Character]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a Boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.Boolean]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a Void]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.Void]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a Byte]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.Byte]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsPrimitiveTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsPrimitiveTypeWorksAsExpected" data-provider="dataIsPrimitiveTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a String]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsPrimitiveTypeWorksAsExpected -->
        <test-method signature="testIsSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsSpecialTypeWorksAsExpected" data-provider="dataSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is an instance of Temporal interface]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.time.Instant]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsSpecialTypeWorksAsExpected -->
        <test-method signature="testIsSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsSpecialTypeWorksAsExpected" data-provider="dataSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a special type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsSpecialTypeWorksAsExpected -->
        <test-method signature="testIsSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsSpecialTypeWorksAsExpected" data-provider="dataSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a special type object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.util.Locale]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsSpecialTypeWorksAsExpected -->
        <test-method signature="testIsSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsSpecialTypeWorksAsExpected" data-provider="dataSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is an instance of Properties class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.util.Properties]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsSpecialTypeWorksAsExpected -->
        <test-method signature="testIsSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsSpecialTypeWorksAsExpected" data-provider="dataSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is an instance of Date class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.util.Date]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsSpecialTypeWorksAsExpected -->
        <test-method signature="testIsSpecialTypeWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsSpecialTypeWorksAsExpected" data-provider="dataSpecialTypeObjectTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is an instance of Currency class]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.util.Currency]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsSpecialTypeWorksAsExpected -->
        <test-method signature="testIsStringWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsStringWorksAsExpected" data-provider="dataIsStringTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns true if the class is a String]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsStringWorksAsExpected -->
        <test-method signature="testIsStringWorksAsExpected(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ClassUtilsTest@435cc7f9]" started-at="2020-07-30T15:18:23 CEST" name="testIsStringWorksAsExpected" data-provider="dataIsStringTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns false if the class is not a String]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.math.BigDecimal]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testIsStringWorksAsExpected -->
      </class> <!-- com.hotels.transformer.utils.ClassUtilsTest -->
      <class name="com.hotels.transformer.validator.ValidatorTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:20 CEST" name="beforeClass" finished-at="2020-07-30T15:18:22 CEST" duration-ms="1458" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testGetConstraintViolationsWorksAsExpected(java.lang.String, java.lang.Object, int)[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testGetConstraintViolationsWorksAsExpected" data-provider="dataValidationConstraintsList" finished-at="2020-07-30T15:18:22 CEST" duration-ms="565" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that no constraints violation are returned if the object is valid.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConstraintViolationsWorksAsExpected -->
        <test-method signature="testGetConstraintViolationsWorksAsExpected(java.lang.String, java.lang.Object, int)[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testGetConstraintViolationsWorksAsExpected" data-provider="dataValidationConstraintsList" finished-at="2020-07-30T15:18:22 CEST" duration-ms="42" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that one constraints violation is returned if the object id is null.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MixedToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[1]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConstraintViolationsWorksAsExpected -->
        <test-method signature="testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull(java.lang.String, java.lang.Object, java.lang.String)[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull" data-provider="dataIllegalArgumentExceptionTesting" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method raise an exception if the given parameter is null and a description message is defined]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[exception message]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[exception message]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: exception message
at com.hotels.transformer.validator.Validator.notNull(Validator.java:78)
at com.hotels.transformer.validator.ValidatorTest.testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull(ValidatorTest.java:88)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull -->
        <test-method signature="testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull(java.lang.String, java.lang.Object, java.lang.String)[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull" data-provider="dataIllegalArgumentExceptionTesting" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method raise an exception if the given parameter is null and a description message is not defined]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <exception class="java.lang.IllegalArgumentException">
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException
at com.hotels.transformer.validator.Validator.notNull(Validator.java:64)
at com.hotels.transformer.validator.ValidatorTest.testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull(ValidatorTest.java:90)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testNotNullRaisesAnExceptionWhenTheGivenObjectIsNull -->
        <test-method signature="testThatNoExceptionAreThrownWhenTheGivenObjectIsNotNullEvenWithoutACustomMessage(java.lang.String, java.lang.Object, java.lang.String)[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testThatNoExceptionAreThrownWhenTheGivenObjectIsNotNullEvenWithoutACustomMessage" data-provider="dataNoExceptionAreRaisedTesting" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method does not raise an exception if the given parameter is not null and a description message is defined]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[val]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[exception message]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatNoExceptionAreThrownWhenTheGivenObjectIsNotNullEvenWithoutACustomMessage -->
        <test-method signature="testValidateDoesNotThrowsExceptionWhenTheBeanIsValid()[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testValidateDoesNotThrowsExceptionWhenTheBeanIsValid" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidateDoesNotThrowsExceptionWhenTheBeanIsValid -->
        <test-method signature="testThatNoExceptionAreThrownWhenTheGivenObjectIsNotNullEvenWithoutACustomMessage(java.lang.String, java.lang.Object, java.lang.String)[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testThatNoExceptionAreThrownWhenTheGivenObjectIsNotNullEvenWithoutACustomMessage" data-provider="dataNoExceptionAreRaisedTesting" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method does not raise an exception if the given parameter is not null and a description message is not defined]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[val]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatNoExceptionAreThrownWhenTheGivenObjectIsNotNullEvenWithoutACustomMessage -->
        <test-method signature="testValidateThrowsExceptionWhenTheBeanIsInvalid()[pri:0, instance:com.hotels.transformer.validator.ValidatorTest@4e49ce2b]" started-at="2020-07-30T15:18:22 CEST" name="testValidateThrowsExceptionWhenTheBeanIsInvalid" finished-at="2020-07-30T15:18:22 CEST" duration-ms="1" status="PASS">
          <exception class="com.hotels.transformer.error.InvalidBeanException">
            <message>
              <![CDATA[com.hotels.beans.sample.mixed.MixedToFoo.id must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidBeanException: com.hotels.beans.sample.mixed.MixedToFoo.id must not be null
at com.hotels.transformer.validator.ValidatorImpl.validate(ValidatorImpl.java:84)
at com.hotels.transformer.validator.ValidatorTest.testValidateThrowsExceptionWhenTheBeanIsInvalid(ValidatorTest.java:146)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidBeanException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidateThrowsExceptionWhenTheBeanIsInvalid -->
      </class> <!-- com.hotels.transformer.validator.ValidatorTest -->
      <class name="com.hotels.transformer.base.DefaultsTest">
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="174" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Character]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[char]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Byte]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[byte]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Integer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[int]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Short]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[short]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[long]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Long]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Float]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[float]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Double]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[double]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
        <test-method signature="testDefaultValueShouldReturnTheExpectedResult(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.base.DefaultsTest@1b7a52dd]" started-at="2020-07-30T15:18:20 CEST" name="testDefaultValueShouldReturnTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:18:20 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFoo]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testDefaultValueShouldReturnTheExpectedResult -->
      </class> <!-- com.hotels.transformer.base.DefaultsTest -->
      <class name="com.hotels.transformer.cache.CacheManagerFactoryTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.transformer.cache.CacheManagerFactoryTest@136965e3]" started-at="2020-07-30T15:18:22 CEST" name="beforeClass" finished-at="2020-07-30T15:18:22 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testGetCacheReturnsACacheManagerInstance()[pri:0, instance:com.hotels.transformer.cache.CacheManagerFactoryTest@136965e3]" started-at="2020-07-30T15:18:22 CEST" name="testGetCacheReturnsACacheManagerInstance" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetCacheReturnsACacheManagerInstance -->
        <test-method signature="testGetCacheThrowsExceptionIfTheCacheNameIsNull()[pri:0, instance:com.hotels.transformer.cache.CacheManagerFactoryTest@136965e3]" started-at="2020-07-30T15:18:22 CEST" name="testGetCacheThrowsExceptionIfTheCacheNameIsNull" finished-at="2020-07-30T15:18:22 CEST" duration-ms="0" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[cacheName cannot be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: cacheName cannot be null!
at com.hotels.transformer.validator.Validator.notNull(Validator.java:78)
at com.hotels.transformer.cache.CacheManagerFactory.getCacheManager(CacheManagerFactory.java:44)
at com.hotels.transformer.cache.CacheManagerFactoryTest.testGetCacheThrowsExceptionIfTheCacheNameIsNull(CacheManagerFactoryTest.java:57)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetCacheThrowsExceptionIfTheCacheNameIsNull -->
      </class> <!-- com.hotels.transformer.cache.CacheManagerFactoryTest -->
      <class name="com.hotels.transformer.utils.ReflectionUtilsTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="beforeClass" finished-at="2020-07-30T15:18:23 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testGetArrayTypeWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetArrayTypeWorksProperly" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetArrayTypeWorksProperly -->
        <test-method signature="testGetClassDeclaredFieldThrowsTheRightException()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetClassDeclaredFieldThrowsTheRightException" finished-at="2020-07-30T15:18:23 CEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetClassDeclaredFieldThrowsTheRightException -->
        <test-method signature="testGetDeclaredFieldRaisesAnExceptionIfTheFieldDoesNotExists()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldRaisesAnExceptionIfTheFieldDoesNotExists" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <exception class="com.hotels.transformer.error.MissingFieldException">
            <message>
              <![CDATA[com.hotels.beans.sample.FromFoo does not contain field: notExistingField]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.MissingFieldException: com.hotels.beans.sample.FromFoo does not contain field: notExistingField
at com.hotels.transformer.utils.ReflectionUtils.lambda$getClassDeclaredField$5(Unknown Source)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getClassDeclaredField(Unknown Source)
at com.hotels.transformer.utils.ReflectionUtils.lambda$getClassDeclaredField$5(Unknown Source)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getClassDeclaredField(Unknown Source)
at com.hotels.transformer.utils.ReflectionUtils.lambda$getDeclaredField$6(Unknown Source)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getDeclaredField(Unknown Source)
at com.hotels.transformer.utils.ReflectionUtilsTest.testGetDeclaredFieldRaisesAnExceptionIfTheFieldDoesNotExists(ReflectionUtilsTest.java:535)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.MissingFieldException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldRaisesAnExceptionIfTheFieldDoesNotExists -->
        <test-method signature="testGetDeclaredFieldTypeWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldTypeWorksProperly" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldTypeWorksProperly -->
        <test-method signature="testGetDeclaredFieldWorksProperly(java.lang.String, java.lang.String, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldWorksProperly" data-provider="dataGetDeclaredFieldTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the class field from first object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[id]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFooSubClass]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldWorksProperly -->
        <test-method signature="testGetDeclaredFieldWorksProperly(java.lang.String, java.lang.String, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetDeclaredFieldWorksProperly" data-provider="dataGetDeclaredFieldTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the class field from a nested object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[nestedObject.name]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFoo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDeclaredFieldWorksProperly -->
        <test-method signature="testGetFieldAnnotationWorksProperly(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetFieldAnnotationWorksProperly" data-provider="dataGetFieldAnnotationTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the field's annotation: 'NotNull' for the given field]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[interface javax.validation.constraints.NotNull]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldAnnotationWorksProperly -->
        <test-method signature="testGetFieldAnnotationWorksProperly(java.lang.String, java.lang.Class, boolean)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetFieldAnnotationWorksProperly" data-provider="dataGetFieldAnnotationTesting" finished-at="2020-07-30T15:18:23 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns: null in case the searched annotation does not exists on the given field]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[interface javax.validation.constraints.NotBlank]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldAnnotationWorksProperly -->
        <test-method signature="testGetFieldValueCatchesRuntimeException()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:23 CEST" name="testGetFieldValueCatchesRuntimeException" finished-at="2020-07-30T15:18:24 CEST" duration-ms="138" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueCatchesRuntimeException -->
        <test-method signature="testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists(java.lang.String, java.lang.Object, java.lang.String)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists" data-provider="dataGetFieldValueDirectAccessTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method throws Exception if the field does not exists]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[notExistingField]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.reflect.InvocationTargetException">
            <full-stacktrace>
              <![CDATA[java.lang.reflect.InvocationTargetException
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.hotels.transformer.utils.ReflectionUtilsTest.testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists(ReflectionUtilsTest.java:231)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: com.hotels.transformer.error.MissingFieldException: com.hotels.beans.sample.mutable.MutableToFoo does not contain field: notExistingField
at com.hotels.transformer.utils.ReflectionUtils.lambda$getClassDeclaredField$5(ReflectionUtils.java:309)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getClassDeclaredField(ReflectionUtils.java:299)
at com.hotels.transformer.utils.ReflectionUtils.lambda$getDeclaredField$6(ReflectionUtils.java:331)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getDeclaredField(ReflectionUtils.java:327)
at com.hotels.transformer.utils.ReflectionUtils.getFieldValueDirectAccess(ReflectionUtils.java:282)
... 38 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.reflect.InvocationTargetException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists -->
        <test-method signature="testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists(java.lang.String, java.lang.Object, java.lang.String)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists" data-provider="dataGetFieldValueDirectAccessTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method throws Exception if the bean is null]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
            <param index="2">
              <value>
                <![CDATA[nestedObject.name]]>
              </value>
            </param>
          </params>
          <exception class="java.lang.reflect.InvocationTargetException">
            <full-stacktrace>
              <![CDATA[java.lang.reflect.InvocationTargetException
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.hotels.transformer.utils.ReflectionUtilsTest.testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists(ReflectionUtilsTest.java:231)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.NullPointerException
at com.hotels.transformer.utils.ReflectionUtils.getFieldValueDirectAccess(ReflectionUtils.java:282)
... 38 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.reflect.InvocationTargetException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueDirectAccessThrowsExceptionIfTheFieldDoesNotExists -->
        <test-method signature="testGetFieldValueDirectAccessWorksAsExpected()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueDirectAccessWorksAsExpected" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueDirectAccessWorksAsExpected -->
        <test-method signature="testGetFieldValueThrowsExceptionIfTheFieldDoesNotExists()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueThrowsExceptionIfTheFieldDoesNotExists" finished-at="2020-07-30T15:18:24 CEST" duration-ms="6" status="PASS">
          <exception class="com.hotels.transformer.error.MissingFieldException">
            <message>
              <![CDATA[com.hotels.beans.sample.mutable.MutableToFoo hasn't a field called: notExistingField.]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.MissingFieldException: com.hotels.beans.sample.mutable.MutableToFoo hasn't a field called: notExistingField.
at com.hotels.transformer.utils.ReflectionUtils.lambda$getGetterMethod$2(ReflectionUtils.java:193)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getGetterMethod(ReflectionUtils.java:186)
at com.hotels.transformer.utils.ReflectionUtils.getFieldValue(ReflectionUtils.java:171)
at com.hotels.transformer.utils.ReflectionUtilsTest.testGetFieldValueThrowsExceptionIfTheFieldDoesNotExists(ReflectionUtilsTest.java:195)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.MissingFieldException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueThrowsExceptionIfTheFieldDoesNotExists -->
        <test-method signature="testGetFieldValueWithAGivenFieldWorksAsExpected()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueWithAGivenFieldWorksAsExpected" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueWithAGivenFieldWorksAsExpected -->
        <test-method signature="testGetFieldValueWorksAsExpected(java.lang.String, java.lang.Object, java.lang.String, java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueWorksAsExpected" data-provider="dataGetFieldValueTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns null if the required field is inside a null object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[nestedObject.name]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="4">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueWorksAsExpected -->
        <test-method signature="testGetFieldValueWorksAsExpected(java.lang.String, java.lang.Object, java.lang.String, java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueWorksAsExpected" data-provider="dataGetFieldValueTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the field value]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[id]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.math.BigInteger]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueWorksAsExpected -->
        <test-method signature="testGetFieldValueWorksAsExpected(java.lang.String, java.lang.Object, java.lang.String, java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetFieldValueWorksAsExpected" data-provider="dataGetFieldValueTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the field value even if there is no getter method defined]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.sample.FromFooSimpleNoGetters@1e620fe7]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[id]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.math.BigInteger]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetFieldValueWorksAsExpected -->
        <test-method signature="testGetGenericFieldTypeWorksProperly(java.lang.String, java.lang.String, java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGenericFieldTypeWorksProperly" data-provider="dataGetGenericFieldTypeTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns a type String.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[list]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGenericFieldTypeWorksProperly -->
        <test-method signature="testGetGenericFieldTypeWorksProperly(java.lang.String, java.lang.String, java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGenericFieldTypeWorksProperly" data-provider="dataGetGenericFieldTypeTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="55" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns a type Object in case of wildcard types.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[list]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooAdvFields]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class java.lang.Object]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGenericFieldTypeWorksProperly -->
        <test-method signature="testGetGetterMethodPrefixWorksAsExpected(java.lang.String, java.lang.Class, java.lang.String)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGetterMethodPrefixWorksAsExpected" data-provider="dataGetGetterMethodPrefixTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the prefix: 'get' in case the returned class is a String ]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[get]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodPrefixWorksAsExpected -->
        <test-method signature="testGetGetterMethodPrefixWorksAsExpected(java.lang.String, java.lang.Class, java.lang.String)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGetterMethodPrefixWorksAsExpected" data-provider="dataGetGetterMethodPrefixTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the prefix: 'is' in case the returned class is a Boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class java.lang.Boolean]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[is]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodPrefixWorksAsExpected -->
        <test-method signature="testGetGetterMethodThrowsExceptionIfTheMethodDoesNotExists()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGetterMethodThrowsExceptionIfTheMethodDoesNotExists" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodThrowsExceptionIfTheMethodDoesNotExists -->
        <test-method signature="testGetGetterMethodPrefixWorksAsExpected(java.lang.String, java.lang.Class, java.lang.String)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGetterMethodPrefixWorksAsExpected" data-provider="dataGetGetterMethodPrefixTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method returns the prefix: 'is' in case the returned class is a primitive boolean]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[boolean]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[is]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodPrefixWorksAsExpected -->
        <test-method signature="testGetGetterMethodWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetGetterMethodWorksProperly" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetGetterMethodWorksProperly -->
        <test-method signature="testGetMapGenericTypeThrowsIllegalArgumentExceptionWhenTheGivenTypeIsNotAMap()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetMapGenericTypeThrowsIllegalArgumentExceptionWhenTheGivenTypeIsNotAMap" finished-at="2020-07-30T15:18:24 CEST" duration-ms="18" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Type for object: list is invalid. It cannot be assigned from: java.util.Map.]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Type for object: list is invalid. It cannot be assigned from: java.util.Map.
at com.hotels.transformer.utils.ReflectionUtils.lambda$getMapGenericType$11(ReflectionUtils.java:517)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getMapGenericType(ReflectionUtils.java:514)
at com.hotels.transformer.utils.ReflectionUtilsTest.testGetMapGenericTypeThrowsIllegalArgumentExceptionWhenTheGivenTypeIsNotAMap(ReflectionUtilsTest.java:315)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetMapGenericTypeThrowsIllegalArgumentExceptionWhenTheGivenTypeIsNotAMap -->
        <test-method signature="testGetParameterAnnotationReturnsNullIfTheAnnotationDoesNotExists()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetParameterAnnotationReturnsNullIfTheAnnotationDoesNotExists" finished-at="2020-07-30T15:18:24 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetParameterAnnotationReturnsNullIfTheAnnotationDoesNotExists -->
        <test-method signature="testGetParameterAnnotationReturnsTheAnnotationIfExists()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetParameterAnnotationReturnsTheAnnotationIfExists" finished-at="2020-07-30T15:18:24 CEST" duration-ms="208" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetParameterAnnotationReturnsTheAnnotationIfExists -->
        <test-method signature="testGetSetterMethodForFieldThrowsExceptionIfTheMethodDoesNotExists()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetSetterMethodForFieldThrowsExceptionIfTheMethodDoesNotExists" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <exception class="com.hotels.transformer.error.MissingMethodException">
            <message>
              <![CDATA[com.hotels.beans.sample.mutable.MutableToFoo.setNotExistingField(java.math.BigInteger)]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.MissingMethodException: com.hotels.beans.sample.mutable.MutableToFoo.setNotExistingField(java.math.BigInteger)
at com.hotels.transformer.utils.ReflectionUtils.lambda$getSetterMethodForField$9(ReflectionUtils.java:447)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getSetterMethodForField(ReflectionUtils.java:440)
at com.hotels.transformer.utils.ReflectionUtilsTest.testGetSetterMethodForFieldThrowsExceptionIfTheMethodDoesNotExists(ReflectionUtilsTest.java:406)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.MissingMethodException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSetterMethodForFieldThrowsExceptionIfTheMethodDoesNotExists -->
        <test-method signature="testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull -->
        <test-method signature="testGetSetterMethodForFieldWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testGetSetterMethodForFieldWorksProperly" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSetterMethodForFieldWorksProperly -->
        <test-method signature="testHandleReflectionExceptionThrowsIllegalStateExceptionWhenGivenExceptionIsIllegalAccessException()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testHandleReflectionExceptionThrowsIllegalStateExceptionWhenGivenExceptionIsIllegalAccessException" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleReflectionExceptionThrowsIllegalStateExceptionWhenGivenExceptionIsIllegalAccessException -->
        <test-method signature="testHandleReflectionExceptionThrowsMissingMethodExceptionWhenGivenExceptionIsNoSuchMethodException()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testHandleReflectionExceptionThrowsMissingMethodExceptionWhenGivenExceptionIsNoSuchMethodException" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleReflectionExceptionThrowsMissingMethodExceptionWhenGivenExceptionIsNoSuchMethodException -->
        <test-method signature="testHandleReflectionExceptionThrowsRuntimeExceptionWhenGivenExceptionIsRuntimeException()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testHandleReflectionExceptionThrowsRuntimeExceptionWhenGivenExceptionIsRuntimeException" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleReflectionExceptionThrowsRuntimeExceptionWhenGivenExceptionIsRuntimeException -->
        <test-method signature="testHandleReflectionExceptionThrowsUndeclaredThrowableExceptionWhenGivenExceptionIsInvalidBeanException()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testHandleReflectionExceptionThrowsUndeclaredThrowableExceptionWhenGivenExceptionIsInvalidBeanException" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleReflectionExceptionThrowsUndeclaredThrowableExceptionWhenGivenExceptionIsInvalidBeanException -->
        <test-method signature="testInvokeMethodCorrectlyHandlesExceptions(java.lang.String, java.lang.Object, java.lang.String, java.lang.Object, boolean, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testInvokeMethodCorrectlyHandlesExceptions" data-provider="dataInvokeMethodTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method raises an IllegalArgumentException in case the given argument is wrong]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MutableToFoo]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[setName]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[class java.lang.IllegalArgumentException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvokeMethodCorrectlyHandlesExceptions -->
        <test-method signature="testInvokeMethodCorrectlyHandlesExceptions(java.lang.String, java.lang.Object, java.lang.String, java.lang.Object, boolean, java.lang.Class)[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testInvokeMethodCorrectlyHandlesExceptions" data-provider="dataInvokeMethodTesting" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the method raises an IllegalAccessException in case the method is not accessible]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[MutableToFooAdvFields(name=null, age=null, indexNumber=null, classType=null, locale=null, list=null, collection=null, map=null, supertypeMap=null, nestedObject=null)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[setIndex]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[123]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[class java.lang.IllegalStateException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvokeMethodCorrectlyHandlesExceptions -->
        <test-method signature="testInvokeMethodRaisesAnIllegalArgumentExceptionIfTheArgumentIsWrong()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testInvokeMethodRaisesAnIllegalArgumentExceptionIfTheArgumentIsWrong" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvokeMethodRaisesAnIllegalArgumentExceptionIfTheArgumentIsWrong -->
        <test-method signature="testMapGenericFieldTypeWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testMapGenericFieldTypeWorksProperly" finished-at="2020-07-30T15:18:24 CEST" duration-ms="54" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapGenericFieldTypeWorksProperly -->
        <test-method signature="testInvokeMethodWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testInvokeMethodWorksProperly" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInvokeMethodWorksProperly -->
        <test-method signature="testMapGenericFieldTypeWorksProperlyForUnparametrizedMap()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testMapGenericFieldTypeWorksProperlyForUnparametrizedMap" finished-at="2020-07-30T15:18:24 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMapGenericFieldTypeWorksProperlyForUnparametrizedMap -->
        <test-method signature="testSetFieldValueInvokesTheSetterMethodInCaseAnExceptionIsRaised()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testSetFieldValueInvokesTheSetterMethodInCaseAnExceptionIsRaised" finished-at="2020-07-30T15:18:24 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetFieldValueInvokesTheSetterMethodInCaseAnExceptionIsRaised -->
        <test-method signature="testSetFieldValueRaiseAnExceptionIfTheValueToSetIsNotValid()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testSetFieldValueRaiseAnExceptionIfTheValueToSetIsNotValid" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[Can not set java.math.BigInteger field com.hotels.beans.sample.mutable.MutableToFooSimple.id to java.lang.Boolean]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: Can not set java.math.BigInteger field com.hotels.beans.sample.mutable.MutableToFooSimple.id to java.lang.Boolean
at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:167)
at java.base/jdk.internal.reflect.UnsafeFieldAccessorImpl.throwSetIllegalArgumentException(UnsafeFieldAccessorImpl.java:171)
at java.base/jdk.internal.reflect.UnsafeObjectFieldAccessorImpl.set(UnsafeObjectFieldAccessorImpl.java:81)
at java.base/java.lang.reflect.Field.set(Field.java:780)
at com.hotels.transformer.utils.ReflectionUtils.setFieldValueWithoutSetterMethod(ReflectionUtils.java:388)
at com.hotels.transformer.utils.ReflectionUtils.setFieldValue(ReflectionUtils.java:372)
at com.hotels.transformer.utils.ReflectionUtilsTest.testSetFieldValueRaiseAnExceptionIfTheValueToSetIsNotValid(ReflectionUtilsTest.java:714)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetFieldValueRaiseAnExceptionIfTheValueToSetIsNotValid -->
        <test-method signature="testSetFieldValueWorksProperly()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testSetFieldValueWorksProperly" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetFieldValueWorksProperly -->
        <test-method signature="testSetFieldValueTriesToInjectThroughSetterMethodInCaseOfErrors()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testSetFieldValueTriesToInjectThroughSetterMethodInCaseOfErrors" finished-at="2020-07-30T15:18:24 CEST" duration-ms="0" status="PASS">
          <exception class="java.lang.NullPointerException">
            <full-stacktrace>
              <![CDATA[java.lang.NullPointerException
at com.hotels.transformer.utils.ReflectionUtils.setFieldValue(ReflectionUtils.java:376)
at com.hotels.transformer.utils.ReflectionUtilsTest.testSetFieldValueTriesToInjectThroughSetterMethodInCaseOfErrors(ReflectionUtilsTest.java:701)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.NullPointerException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testSetFieldValueTriesToInjectThroughSetterMethodInCaseOfErrors -->
        <test-method signature="testThatTheReturnedMethodFromGetGetterMethodReturnsTheExpectedValue()[pri:0, instance:com.hotels.transformer.utils.ReflectionUtilsTest@4364712f]" started-at="2020-07-30T15:18:24 CEST" name="testThatTheReturnedMethodFromGetGetterMethodReturnsTheExpectedValue" finished-at="2020-07-30T15:18:24 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatTheReturnedMethodFromGetGetterMethodReturnsTheExpectedValue -->
      </class> <!-- com.hotels.transformer.utils.ReflectionUtilsTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
