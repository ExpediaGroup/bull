// Generated by delombok at Tue Sep 06 15:51:08 CEST 2022
/**
 * Copyright (C) 2019-2021 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.expediagroup.beans.generator.bytecode.sample

import org.apache.commons.lang3.builder.ToStringBuilder.reflectionToString

/**
 * Example of generating and using a Transformer at runtime.
 */
object TransformerBytecodeAdapterExample {
    private val expectedResult: Destination
        private get() {
            val destination = Destination()
            destination.setABoolean(true)
            destination.setAString("hello")
            return destination
        }

    /**
     * Entry point for manual testing.
     * Run this to compare the usage of a generated transformer with the above reference result.
     * @param args the args
     */
    fun main(args: Array<String?>?) {
        // create a transformer model
        val spec = TransformerSpec(MappingCodeFactory.newInstance())
        // create a bytecode adapter for the model
        val bytecode: TransformerBytecodeAdapter = TransformerBytecodeAdapter.builder()
            .spec(spec)
            .build()
        // generate and compile a new Transformer
        val transformer: Transformer<Source, Destination> =
            bytecode.newTransformer(Source::class.java, Destination::class.java)
        val anInt = 42
        val source = Source()
        source.setABoolean(true)
        source.setAnInt(anInt)
        source.setAString("hello")
        // use the generated Transformer
        val destination: Destination = transformer.transform(source)
        ToStringBuilder.setDefaultStyle(ToStringStyle.SHORT_PREFIX_STYLE)
        System.out.printf("Transformed: %s%n", reflectionToString(destination))
        System.out.printf("Expected: %s%n", reflectionToString(expectedResult))
    }
}
