// Generated by delombok at Tue Sep 06 15:51:54 CEST 2022
/**
 * Copyright (C) 2019-2021 Expedia, Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package com.expediagroup.beans.generator.source.sample

import lombok.AccessLevel.PRIVATE

/**
 * Example of generating and using a Transformer at runtime.
 */
object TransformerSourceAdapterExample {
    private val log: org.slf4j.Logger = org.slf4j.LoggerFactory.getLogger(TransformerSourceAdapterExample::class.java)

    /**
     * Entry point for manual testing.
     * Run this to compare the usage of a generated transformer with the above reference result.
     * @param args the args
     */
    fun main(args: Array<String?>?) {
        // create a transformer model
        val spec = TransformerSpec(MappingCodeFactory.newInstance())
        // create a bytecode adapter for the model
        // with default destination path and Java package
        val source: Unit = TransformerSourceAdapter.builder()
            .spec(spec)
            .build()
        // generate a new Transformer source file
        val transformerFile: Unit = source.newTransformerFile(Source::class.java, Destination::class.java)
        // write file to disk
        try {
            val sourcePath: Unit = transformerFile.write()
            log.info("find generated source at: {}", sourcePath.toAbsolutePath())
        } catch (e: IOException) {
            log.error("could not write source: {}", e.getMessage(), e)
        }
    }
}