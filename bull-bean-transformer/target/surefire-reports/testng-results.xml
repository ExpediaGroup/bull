<?xml version="1.0" encoding="UTF-8"?>
<testng-results ignored="0" total="97" passed="97" failed="0" skipped="0">
  <reporter-output>
  </reporter-output>
  <suite started-at="2020-07-30T15:18:54 CEST" name="Surefire suite" finished-at="2020-07-30T15:19:07 CEST" duration-ms="13612">
    <groups>
    </groups>
    <test started-at="2020-07-30T15:18:54 CEST" name="Surefire test" finished-at="2020-07-30T15:19:07 CEST" duration-ms="13612">
      <class name="com.hotels.beans.transformer.BeanTransformerTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="beforeClass" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testConversionAnalyzerIsInitializedOnlyIfValidationIsEnabled(java.lang.String, boolean, boolean)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="testConversionAnalyzerIsInitializedOnlyIfValidationIsEnabled" data-provider="dataConversionAnalyzerInitializationTesting" finished-at="2020-07-30T15:18:59 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the ConversionAnalyzer object is not created if the automatic conversion is disabled]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConversionAnalyzerIsInitializedOnlyIfValidationIsEnabled -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testConversionAnalyzerIsInitializedOnlyIfValidationIsEnabled(java.lang.String, boolean, boolean)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="testConversionAnalyzerIsInitializedOnlyIfValidationIsEnabled" data-provider="dataConversionAnalyzerInitializationTesting" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the ConversionAnalyzer object is created if the automatic conversion is enabled]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testConversionAnalyzerIsInitializedOnlyIfValidationIsEnabled -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetConstructorArgsValuesReturnsTheDefaultTypeIfTheDestinationFieldNameIsNull()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:18:59 CEST" name="testGetConstructorArgsValuesReturnsTheDefaultTypeIfTheDestinationFieldNameIsNull" finished-at="2020-07-30T15:19:00 CEST" duration-ms="1435" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConstructorArgsValuesReturnsTheDefaultTypeIfTheDestinationFieldNameIsNull -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:00 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:00 CEST" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetSourceFieldTypeReturnsNull()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:00 CEST" name="testGetSourceFieldTypeReturnsNull" finished-at="2020-07-30T15:19:01 CEST" duration-ms="703" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSourceFieldTypeReturnsNull -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="17" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetSourceFieldTypeReturnsTheSourceObjectClass()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testGetSourceFieldTypeReturnsTheSourceObjectClass" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSourceFieldTypeReturnsTheSourceObjectClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetSourceFieldTypeThrowsMissingFieldException()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testGetSourceFieldTypeThrowsMissingFieldException" finished-at="2020-07-30T15:19:01 CEST" duration-ms="35" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSourceFieldTypeThrowsMissingFieldException -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <exception class="java.lang.reflect.InvocationTargetException">
            <full-stacktrace>
              <![CDATA[java.lang.reflect.InvocationTargetException
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at com.hotels.beans.transformer.BeanTransformerTest.testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull(BeanTransformerTest.java:175)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.NullPointerException
at com.hotels.beans.transformer.TransformerImpl.getSourceFieldValue(Unknown Source)
... 38 more
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.reflect.InvocationTargetException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSourceFieldValueRaisesAnExceptionIfTheParameterAreNull -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="11" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetSourceFieldValueThrowsNoExceptionIfAFieldTransformerIsDefined()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testGetSourceFieldValueThrowsNoExceptionIfAFieldTransformerIsDefined" finished-at="2020-07-30T15:19:01 CEST" duration-ms="267" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetSourceFieldValueThrowsNoExceptionIfAFieldTransformerIsDefined -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="12" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetTransformedValueWorksProperly(java.lang.String, java.lang.String, java.lang.Object, com.hotels.transformer.model.FieldTransformer, boolean, boolean, java.lang.Object)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testGetTransformedValueWorksProperly" data-provider="dataGetTransformerFunctionTesting" finished-at="2020-07-30T15:19:01 CEST" duration-ms="3" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the primitive type conversion function is not executed if the primitive type conversion is disabled]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[age]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="6">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTransformedValueWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetTransformedValueWorksProperly(java.lang.String, java.lang.String, java.lang.Object, com.hotels.transformer.model.FieldTransformer, boolean, boolean, java.lang.Object)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testGetTransformedValueWorksProperly" data-provider="dataGetTransformerFunctionTesting" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the primitive type conversion function is not executed if the destination field type is not primitive]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[age]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
            <param index="3">
              <value is-null="true"/>
            </param>
            <param index="4">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="5">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="6">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTransformedValueWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testHandleInjectionExceptionWorksAsExpected(java.lang.String, boolean, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testHandleInjectionExceptionWorksAsExpected" data-provider="dataHandleInjectionExceptionTesting" finished-at="2020-07-30T15:19:01 CEST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the handleInjectionException returns an error message if the forceConstructorInjection is true]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.transformer.error.InvalidBeanException]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleInjectionExceptionWorksAsExpected -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testHandleInjectionExceptionWorksAsExpected(java.lang.String, boolean, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testHandleInjectionExceptionWorksAsExpected" data-provider="dataHandleInjectionExceptionTesting" finished-at="2020-07-30T15:19:01 CEST" duration-ms="7" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the handleInjectionException invokes the injectValues (that throws a MutableToFoo object) if the forceConstructorInjection is false]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFoo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testHandleInjectionExceptionWorksAsExpected -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testRemoveFieldMappingRaisesExceptionIfItsCalledWithNullParam()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testRemoveFieldMappingRaisesExceptionIfItsCalledWithNullParam" finished-at="2020-07-30T15:19:01 CEST" duration-ms="0" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The field name for which the mapping has to be removed cannot be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The field name for which the mapping has to be removed cannot be null!
at com.hotels.transformer.validator.Validator.notNull(Validator.java:78)
at com.hotels.transformer.AbstractTransformer.removeFieldMapping(Unknown Source)
at com.hotels.beans.transformer.BeanTransformerTest.testRemoveFieldMappingRaisesExceptionIfItsCalledWithNullParam(BeanTransformerTest.java:96)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFieldMappingRaisesExceptionIfItsCalledWithNullParam -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testRemoveFieldMappingWorksProperly()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testRemoveFieldMappingWorksProperly" finished-at="2020-07-30T15:19:01 CEST" duration-ms="67" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFieldMappingWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testRemoveFieldTransformerRaisesExceptionIfItsCalledWithNullParam()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testRemoveFieldTransformerRaisesExceptionIfItsCalledWithNullParam" finished-at="2020-07-30T15:19:01 CEST" duration-ms="2" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[The field name for which the transformer function has to be removed cannot be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: The field name for which the transformer function has to be removed cannot be null!
at com.hotels.transformer.validator.Validator.notNull(Validator.java:78)
at com.hotels.transformer.AbstractTransformer.removeFieldTransformer(Unknown Source)
at com.hotels.beans.transformer.BeanTransformerTest.testRemoveFieldTransformerRaisesExceptionIfItsCalledWithNullParam(BeanTransformerTest.java:161)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFieldTransformerRaisesExceptionIfItsCalledWithNullParam -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testRemoveFieldTransformerWorksProperly()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testRemoveFieldTransformerWorksProperly" finished-at="2020-07-30T15:19:01 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testRemoveFieldTransformerWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testResetFieldsMappingWorksProperly()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testResetFieldsMappingWorksProperly" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResetFieldsMappingWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testResetFieldsTransformerWorksProperly()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testResetFieldsTransformerWorksProperly" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testResetFieldsTransformerWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testThatPrimitiveTypeConversionIsCorrectlyEnabled()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testThatPrimitiveTypeConversionIsCorrectlyEnabled" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatPrimitiveTypeConversionIsCorrectlyEnabled -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testValidatorIsInitializedOnlyIfValidationIsEnabled(java.lang.String, boolean, boolean)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testValidatorIsInitializedOnlyIfValidationIsEnabled" data-provider="dataValidationInitializationTesting" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the Validator object is not created if the validation is disabled]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidatorIsInitializedOnlyIfValidationIsEnabled -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testValidatorIsInitializedOnlyIfValidationIsEnabled(java.lang.String, boolean, boolean)[pri:0, instance:com.hotels.beans.transformer.BeanTransformerTest@a5bbaec]" started-at="2020-07-30T15:19:01 CEST" name="testValidatorIsInitializedOnlyIfValidationIsEnabled" data-provider="dataValidationInitializationTesting" finished-at="2020-07-30T15:19:01 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Tests that the Validator object is created if the validation is enabled]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidatorIsInitializedOnlyIfValidationIsEnabled -->
      </class> <!-- com.hotels.beans.transformer.BeanTransformerTest -->
      <class name="com.hotels.beans.transformer.MixedObjectTransformationTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:58 CEST" name="beforeClass" finished-at="2020-07-30T15:18:58 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:58 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:58 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testFieldTransformationSkipWorksProperly()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:58 CEST" name="testFieldTransformationSkipWorksProperly" finished-at="2020-07-30T15:18:58 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFieldTransformationSkipWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:58 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:58 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMixedBeanIsCorrectlyCopied()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:58 CEST" name="testMixedBeanIsCorrectlyCopied" finished-at="2020-07-30T15:18:59 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedBeanIsCorrectlyCopied -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMixedBeanWithDifferentFieldNamesIsCorrectlyCopied()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testMixedBeanWithDifferentFieldNamesIsCorrectlyCopied" finished-at="2020-07-30T15:18:59 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedBeanWithDifferentFieldNamesIsCorrectlyCopied -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMixedBeanWithDifferentFieldNamesIsCorrectlyCopiedThroughFieldTransformer()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testMixedBeanWithDifferentFieldNamesIsCorrectlyCopiedThroughFieldTransformer" finished-at="2020-07-30T15:18:59 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedBeanWithDifferentFieldNamesIsCorrectlyCopiedThroughFieldTransformer -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMixedBeanWithMissingFieldsReturnsTheDefaultValueWhenTheSourceObjectDoesNotContainARequiredField()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testMixedBeanWithMissingFieldsReturnsTheDefaultValueWhenTheSourceObjectDoesNotContainARequiredField" finished-at="2020-07-30T15:18:59 CEST" duration-ms="29" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedBeanWithMissingFieldsReturnsTheDefaultValueWhenTheSourceObjectDoesNotContainARequiredField -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMixedBeanWithMissingFieldsThrowsMissingFieldExceptionWhenTheSourceObjectDoesNotContainARequiredField()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testMixedBeanWithMissingFieldsThrowsMissingFieldExceptionWhenTheSourceObjectDoesNotContainARequiredField" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <exception class="com.hotels.transformer.error.MissingFieldException">
            <message>
              <![CDATA[com.hotels.beans.sample.FromFoo hasn't a field called: fooField.]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.MissingFieldException: com.hotels.beans.sample.FromFoo hasn't a field called: fooField.
at com.hotels.transformer.utils.ReflectionUtils.lambda$getGetterMethod$2(Unknown Source)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ReflectionUtils.getGetterMethod(Unknown Source)
at com.hotels.transformer.utils.ReflectionUtils.getFieldValue(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.getSourceFieldValue(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.getFieldValue(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.lambda$getConstructorArgsValues$2(Unknown Source)
at java.base/java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:104)
at java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:593)
at com.hotels.beans.transformer.TransformerImpl.getConstructorArgsValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.transform(Unknown Source)
at com.hotels.beans.transformer.AbstractBeanTransformer.transform(Unknown Source)
at com.hotels.beans.transformer.MixedObjectTransformationTest.testMixedBeanWithMissingFieldsThrowsMissingFieldExceptionWhenTheSourceObjectDoesNotContainARequiredField(MixedObjectTransformationTest.java:136)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.MissingFieldException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedBeanWithMissingFieldsThrowsMissingFieldExceptionWhenTheSourceObjectDoesNotContainARequiredField -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMixedBeanWithoutAllArgsConstructorIsCorrectlyCopied()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testMixedBeanWithoutAllArgsConstructorIsCorrectlyCopied" finished-at="2020-07-30T15:18:59 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMixedBeanWithoutAllArgsConstructorIsCorrectlyCopied -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions" finished-at="2020-07-30T15:18:59 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:59 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationOnAnExistingDestinationWorksProperly()[pri:0, instance:com.hotels.beans.transformer.MixedObjectTransformationTest@19a31b9d]" started-at="2020-07-30T15:18:59 CEST" name="testTransformationOnAnExistingDestinationWorksProperly" finished-at="2020-07-30T15:18:59 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationOnAnExistingDestinationWorksProperly -->
      </class> <!-- com.hotels.beans.transformer.MixedObjectTransformationTest -->
      <class name="com.hotels.beans.populator.ArrayPopulatorTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.populator.ArrayPopulatorTest@334ebcaa]" started-at="2020-07-30T15:19:05 CEST" name="beforeClass" finished-at="2020-07-30T15:19:05 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testGetPopulatedObjectWorksProperly(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.beans.populator.ArrayPopulatorTest@334ebcaa]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatedObjectWorksProperly" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.String]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.String;@5c30b46]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatedObjectWorksProperly -->
        <test-method signature="testGetPopulatedObjectWorksProperly(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.beans.populator.ArrayPopulatorTest@334ebcaa]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatedObjectWorksProperly" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Character]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[C@d678716]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatedObjectWorksProperly -->
        <test-method signature="testGetPopulatedObjectWorksProperly(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.beans.populator.ArrayPopulatorTest@334ebcaa]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatedObjectWorksProperly" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="5" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Integer]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[I@79611705]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatedObjectWorksProperly -->
        <test-method signature="testGetPopulatedObjectWorksProperly(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.beans.populator.ArrayPopulatorTest@334ebcaa]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatedObjectWorksProperly" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="13" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFooStaticField]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Lcom.hotels.beans.sample.mixed.MixedToFooStaticField;@1efb4dba]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatedObjectWorksProperly -->
        <test-method signature="testGetPopulatedObjectWorksProperly(java.lang.Class, java.lang.Object)[pri:0, instance:com.hotels.beans.populator.ArrayPopulatorTest@334ebcaa]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatedObjectWorksProperly" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="1" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.lang.Object]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[[Ljava.lang.Boolean;@4818683b]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatedObjectWorksProperly -->
      </class> <!-- com.hotels.beans.populator.ArrayPopulatorTest -->
      <class name="com.hotels.beans.transformer.ImmutableObjectTransformationTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:01 CEST" name="beforeClass" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testFieldTransformationSkipWorksProperly()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:01 CEST" name="testFieldTransformationSkipWorksProperly" finished-at="2020-07-30T15:19:01 CEST" duration-ms="33" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFieldTransformationSkipWorksProperly -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:01 CEST" name="afterMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:01 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:01 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetConstructorValuesFromFieldsWorksProperly()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:01 CEST" name="testGetConstructorValuesFromFieldsWorksProperly" finished-at="2020-07-30T15:19:02 CEST" duration-ms="153" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetConstructorValuesFromFieldsWorksProperly -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="afterMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetDestFieldNameIsRetrievedFromConstructorArgIfTheParamNameIsNotProvidedFromJVM()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testGetDestFieldNameIsRetrievedFromConstructorArgIfTheParamNameIsNotProvidedFromJVM" finished-at="2020-07-30T15:19:02 CEST" duration-ms="706" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDestFieldNameIsRetrievedFromConstructorArgIfTheParamNameIsNotProvidedFromJVM -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="afterMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testGetDestFieldNameReturnsNullIfConstructorParamHasNoNameProvidedFromJVMAndNoConstructorArgIsDefined()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testGetDestFieldNameReturnsNullIfConstructorParamHasNoNameProvidedFromJVMAndNoConstructorArgIsDefined" finished-at="2020-07-30T15:19:02 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetDestFieldNameReturnsNullIfConstructorParamHasNoNameProvidedFromJVMAndNoConstructorArgIsDefined -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="afterMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testImmutableBeanIsCorrectlyCopied(java.lang.String, com.hotels.beans.transformer.BeanTransformer, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testImmutableBeanIsCorrectlyCopied" data-provider="dataDefaultTransformationTesting" finished-at="2020-07-30T15:19:02 CEST" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that immutable beans with constructor arguments parameter annotated with: @ConstructorArg are correctly copied.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.transformer.TransformerImpl@4afdcd4a]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooCustomAnnotation]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanIsCorrectlyCopied -->
        <test-method signature="testImmutableBeanIsCorrectlyCopied(java.lang.String, com.hotels.beans.transformer.BeanTransformer, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testImmutableBeanIsCorrectlyCopied" data-provider="dataDefaultTransformationTesting" finished-at="2020-07-30T15:19:02 CEST" duration-ms="14" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that immutable beans without custom field mapping are correctly transformed.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.transformer.TransformerImpl@13664e6]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanIsCorrectlyCopied -->
        <test-method signature="testImmutableBeanIsCorrectlyCopied(java.lang.String, com.hotels.beans.transformer.BeanTransformer, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testImmutableBeanIsCorrectlyCopied" data-provider="dataDefaultTransformationTesting" finished-at="2020-07-30T15:19:02 CEST" duration-ms="16" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that immutable beans without constructor arguments parameter annotated with: @ConstructorArg are correctly copied.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.transformer.TransformerImpl@473c9846]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFoo]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanIsCorrectlyCopied -->
        <test-method signature="testImmutableBeanIsCorrectlyCopied(java.lang.String, com.hotels.beans.transformer.BeanTransformer, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testImmutableBeanIsCorrectlyCopied" data-provider="dataDefaultTransformationTesting" finished-at="2020-07-30T15:19:02 CEST" duration-ms="20" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that immutable beans with extremely complex map are correctly transformed.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.transformer.TransformerImpl@624254d3]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFooMap(sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}, extremeComplexMap={FromFooSimple(name=Goofy, id=1234, active=true)={donald=duck}}, unparametrizedMap={})]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooMap]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanIsCorrectlyCopied -->
        <test-method signature="testImmutableBeanIsCorrectlyCopied(java.lang.String, com.hotels.beans.transformer.BeanTransformer, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="testImmutableBeanIsCorrectlyCopied" data-provider="dataDefaultTransformationTesting" finished-at="2020-07-30T15:19:02 CEST" duration-ms="24" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that bean that extends another class are correctly copied]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.transformer.TransformerImpl@2702b533]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFooSubClass(surname=surname, phone=123, check=true, amount=10)]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanIsCorrectlyCopied -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="afterMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="afterMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:02 CEST" name="afterMethod" finished-at="2020-07-30T15:19:02 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testImmutableBeanWithAdvancedFieldsIsCorrectlyCopied(java.lang.String, com.hotels.beans.sample.FromFooAdvFields, java.lang.Class, boolean)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testImmutableBeanWithAdvancedFieldsIsCorrectlyCopied" data-provider="dataAdvancedFieldsCopyTesting" finished-at="2020-07-30T15:19:03 CEST" duration-ms="44" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that bean containing advanced final fields are correctly copied]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFooAdvFields(name=Optional[Goofy], age=Optional[34], indexNumber=null, classType=IMMUTABLE, locale=en, price=10.0, list=[donald, duck], collection=[donald, duck], map={donald=duck}, supertypeMap={donald=duck}, nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooAdvFields]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[true]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanWithAdvancedFieldsIsCorrectlyCopied -->
        <test-method signature="testImmutableBeanWithAdvancedFieldsIsCorrectlyCopied(java.lang.String, com.hotels.beans.sample.FromFooAdvFields, java.lang.Class, boolean)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testImmutableBeanWithAdvancedFieldsIsCorrectlyCopied" data-provider="dataAdvancedFieldsCopyTesting" finished-at="2020-07-30T15:19:03 CEST" duration-ms="36" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that bean containing advanced final fields (with empty optional) are correctly copied]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFooAdvFields(name=Optional.empty, age=Optional[34], indexNumber=null, classType=IMMUTABLE, locale=en, price=10.0, list=[donald, duck], collection=[donald, duck], map={donald=duck}, supertypeMap={donald=duck}, nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooAdvFields]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[false]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanWithAdvancedFieldsIsCorrectlyCopied -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testImmutableBeanWithDifferentFieldNamesIsCorrectlyCopied()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testImmutableBeanWithDifferentFieldNamesIsCorrectlyCopied" finished-at="2020-07-30T15:19:03 CEST" duration-ms="13" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanWithDifferentFieldNamesIsCorrectlyCopied -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testImmutableBeanWithMissingConstructorArgIsCorrectlyCopied()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testImmutableBeanWithMissingConstructorArgIsCorrectlyCopied" finished-at="2020-07-30T15:19:03 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testImmutableBeanWithMissingConstructorArgIsCorrectlyCopied -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions" finished-at="2020-07-30T15:19:03 CEST" duration-ms="31" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformRaiseAnExceptionIfTheTransformerFunctionIsNotValid()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testTransformRaiseAnExceptionIfTheTransformerFunctionIsNotValid" finished-at="2020-07-30T15:19:03 CEST" duration-ms="107" status="PASS">
          <exception class="com.hotels.transformer.error.InvalidFunctionException">
            <message>
              <![CDATA[The transformer function defined for the field is not valid.]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidFunctionException: The transformer function defined for the field is not valid.
at com.hotels.transformer.model.FieldTransformer.getTransformedObject(FieldTransformer.java:85)
at com.hotels.beans.transformer.TransformerImpl.getTransformedValue(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.getFieldValue(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.lambda$getConstructorArgsValues$2(Unknown Source)
at java.base/java.util.stream.Streams$RangeIntSpliterator.forEachRemaining(Streams.java:104)
at java.base/java.util.stream.IntPipeline$Head.forEach(IntPipeline.java:593)
at com.hotels.beans.transformer.TransformerImpl.getConstructorArgsValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.transform(Unknown Source)
at com.hotels.beans.transformer.AbstractBeanTransformer.transform(Unknown Source)
at com.hotels.beans.transformer.ImmutableObjectTransformationTest.testTransformRaiseAnExceptionIfTheTransformerFunctionIsNotValid(ImmutableObjectTransformationTest.java:488)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: java.lang.NullPointerException
at com.hotels.transformer.model.FieldTransformer.getTransformedObject(FieldTransformer.java:83)
... 44 more
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidFunctionException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformRaiseAnExceptionIfTheTransformerFunctionIsNotValid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformThrowsExceptionIfTheConstructorInvocationThrowsException(java.lang.String, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testTransformThrowsExceptionIfTheConstructorInvocationThrowsException" data-provider="dataConstructorErrorTesting" finished-at="2020-07-30T15:19:03 CEST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that an exception is thrown if the constructor is invoked with wrong type arguments]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=null, list=null, nestedObject=null)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooDiffTypesFields]]>
              </value>
            </param>
          </params>
          <exception class="com.hotels.transformer.error.InvalidBeanException">
            <message>
              <![CDATA[Constructor invoked with wrong arguments. Expected: public com.hotels.beans.sample.immutable.ImmutableToFooDiffTypesFields(java.lang.String,java.lang.String,java.util.List,java.util.List,com.hotels.beans.sample.immutable.ImmutableToSubFoo); Found: com.hotels.beans.sample.immutable.ImmutableToFooDiffTypesFields(java.lang.String,java.math.BigInteger,null,null,null). Double check that each ImmutableToFooDiffTypesFields's field have the same type and name than the source object: com.hotels.beans.sample.FromFoo otherwise specify a transformer configuration. Error message: argument type mismatch]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidBeanException: Constructor invoked with wrong arguments. Expected: public com.hotels.beans.sample.immutable.ImmutableToFooDiffTypesFields(java.lang.String,java.lang.String,java.util.List,java.util.List,com.hotels.beans.sample.immutable.ImmutableToSubFoo); Found: com.hotels.beans.sample.immutable.ImmutableToFooDiffTypesFields(java.lang.String,java.math.BigInteger,null,null,null). Double check that each ImmutableToFooDiffTypesFields's field have the same type and name than the source object: com.hotels.beans.sample.FromFoo otherwise specify a transformer configuration. Error message: argument type mismatch
at com.hotels.beans.transformer.TransformerImpl.handleInjectionException(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
at com.hotels.beans.transformer.TransformerImpl.transform(Unknown Source)
at com.hotels.beans.transformer.AbstractBeanTransformer.transform(Unknown Source)
at com.hotels.beans.transformer.ImmutableObjectTransformationTest.testTransformThrowsExceptionIfTheConstructorInvocationThrowsException(ImmutableObjectTransformationTest.java:201)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:77)
at org.testng.internal.TestMethodWithDataProviderMethodWorker.call(TestMethodWithDataProviderMethodWorker.java:15)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.Executors$RunnableAdapter.call(Executors.java:515)
at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:264)
at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1128)
at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:628)
at java.base/java.lang.Thread.run(Thread.java:834)
Caused by: java.lang.IllegalArgumentException: argument type mismatch
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance0(Native Method)
at java.base/jdk.internal.reflect.NativeConstructorAccessorImpl.newInstance(NativeConstructorAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingConstructorAccessorImpl.newInstance(DelegatingConstructorAccessorImpl.java:45)
at java.base/java.lang.reflect.Constructor.newInstance(Constructor.java:490)
at com.hotels.transformer.utils.ClassUtils.getInstance(ClassUtils.java:533)
at com.hotels.beans.transformer.TransformerImpl.injectValues(Unknown Source)
... 19 more
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidBeanException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformThrowsExceptionIfTheConstructorInvocationThrowsException -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="afterMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:03 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformThrowsExceptionWhenImmutableIsInvalid()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:03 CEST" name="testTransformThrowsExceptionWhenImmutableIsInvalid" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1000" status="PASS">
          <exception class="com.hotels.transformer.error.InvalidBeanException">
            <message>
              <![CDATA[com.hotels.beans.sample.immutable.ImmutableToFoo.id must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidBeanException: com.hotels.beans.sample.immutable.ImmutableToFoo.id must not be null
at com.hotels.transformer.validator.ValidatorImpl.validate(ValidatorImpl.java:84)
at com.hotels.beans.transformer.TransformerImpl.transform(Unknown Source)
at com.hotels.beans.transformer.AbstractBeanTransformer.transform(Unknown Source)
at com.hotels.beans.transformer.ImmutableObjectTransformationTest.testTransformThrowsExceptionWhenImmutableIsInvalid(ImmutableObjectTransformationTest.java:227)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidBeanException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformThrowsExceptionWhenImmutableIsInvalid -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformThrowsNoExceptionIfTheDestinationObjectValuesAreNotValidAndTheValidationIsDisabled()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformThrowsNoExceptionIfTheDestinationObjectValuesAreNotValidAndTheValidationIsDisabled" finished-at="2020-07-30T15:19:04 CEST" duration-ms="18" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformThrowsNoExceptionIfTheDestinationObjectValuesAreNotValidAndTheValidationIsDisabled -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="14" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationOnAnExistingDestinationWorksProperly()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationOnAnExistingDestinationWorksProperly" finished-at="2020-07-30T15:19:04 CEST" duration-ms="49" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationOnAnExistingDestinationWorksProperly -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationReturnsAMeaningfulException()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationReturnsAMeaningfulException" finished-at="2020-07-30T15:19:04 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationReturnsAMeaningfulException -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationWithCompositeFieldNameMappingIsWorkingAsExpected(java.lang.String, java.lang.Object, java.lang.String, java.math.BigInteger, [I)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationWithCompositeFieldNameMappingIsWorkingAsExpected" data-provider="dataCompositeFieldNameTesting" finished-at="2020-07-30T15:19:04 CEST" duration-ms="239" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that, in case a destination object field is contained into a nested object of the source field, defining a composite {@link FieldMapping} the field is correctly set even if some of them are null.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=null)]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Goofy]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1234]]>
              </value>
            </param>
            <param index="4">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationWithCompositeFieldNameMappingIsWorkingAsExpected -->
        <test-method signature="testTransformationWithCompositeFieldNameMappingIsWorkingAsExpected(java.lang.String, java.lang.Object, java.lang.String, java.math.BigInteger, [I)[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationWithCompositeFieldNameMappingIsWorkingAsExpected" data-provider="dataCompositeFieldNameTesting" finished-at="2020-07-30T15:19:04 CEST" duration-ms="239" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that, in case a destination object field is contained into a nested object of the source field, defining a composite FieldMappingthe field is correctly set.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[Goofy]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[1234]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[[I@56a9b662]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationWithCompositeFieldNameMappingIsWorkingAsExpected -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformerFunctionHasHigherPriorityThanDefaultValue()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformerFunctionHasHigherPriorityThanDefaultValue" finished-at="2020-07-30T15:19:04 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformerFunctionHasHigherPriorityThanDefaultValue -->
        <test-method is-config="true" signature="afterMethod()[pri:0, instance:com.hotels.beans.transformer.ImmutableObjectTransformationTest@708f018e]" started-at="2020-07-30T15:19:04 CEST" name="afterMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- afterMethod -->
      </class> <!-- com.hotels.beans.transformer.ImmutableObjectTransformationTest -->
      <class name="com.hotels.beans.transformer.MutableObjectTransformationTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeClass" finished-at="2020-07-30T15:19:04 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testAutomaticPrimitiveTypeTransformationWorksProperly()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testAutomaticPrimitiveTypeTransformationWorksProperly" finished-at="2020-07-30T15:19:04 CEST" duration-ms="21" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testAutomaticPrimitiveTypeTransformationWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testFieldTransformationIsAppliedOnlyToASpecificField()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testFieldTransformationIsAppliedOnlyToASpecificField" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFieldTransformationIsAppliedOnlyToASpecificField -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testFieldTransformationIsAppliedToAllMatchingFields()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testFieldTransformationIsAppliedToAllMatchingFields" finished-at="2020-07-30T15:19:04 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFieldTransformationIsAppliedToAllMatchingFields -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testFieldTransformationSkipWorksProperly()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testFieldTransformationSkipWorksProperly" finished-at="2020-07-30T15:19:04 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testFieldTransformationSkipWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testInjectValuesThrowsException()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testInjectValuesThrowsException" finished-at="2020-07-30T15:19:04 CEST" duration-ms="7" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testInjectValuesThrowsException -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testMutableBeanIsCorrectlyCopied()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testMutableBeanIsCorrectlyCopied" finished-at="2020-07-30T15:19:04 CEST" duration-ms="8" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testMutableBeanIsCorrectlyCopied -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions" finished-at="2020-07-30T15:19:04 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatAnyTypeOfBeanContainsANotExistingFieldInTheSourceObjectIsCorrectlyCopiedThroughTransformerFunctions -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testThatBothPrimitiveTypeTransformationAndCustomTransformationAreExecuted()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testThatBothPrimitiveTypeTransformationAndCustomTransformationAreExecuted" finished-at="2020-07-30T15:19:04 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testThatBothPrimitiveTypeTransformationAndCustomTransformationAreExecuted -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformThrowsExceptionWhenMutableBeanHasNoDefaultConstructor()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformThrowsExceptionWhenMutableBeanHasNoDefaultConstructor" finished-at="2020-07-30T15:19:04 CEST" duration-ms="2" status="PASS">
          <exception class="com.hotels.transformer.error.InvalidBeanException">
            <message>
              <![CDATA[No default constructors available for class: com.hotels.beans.sample.mutable.MutableToFooInvalid]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidBeanException: No default constructors available for class: com.hotels.beans.sample.mutable.MutableToFooInvalid
at com.hotels.beans.transformer.TransformerImpl.injectValues(TransformerImpl.java:128)
at com.hotels.beans.transformer.TransformerImpl.transform(TransformerImpl.java:67)
at com.hotels.beans.transformer.AbstractBeanTransformer.transform(AbstractBeanTransformer.java:125)
at com.hotels.beans.transformer.MutableObjectTransformationTest.testTransformThrowsExceptionWhenMutableBeanHasNoDefaultConstructor(MutableObjectTransformationTest.java:73)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
Caused by: com.hotels.transformer.error.InvalidBeanException: No default constructors available for class: com.hotels.beans.sample.mutable.MutableToFooInvalid
at com.hotels.transformer.utils.ClassUtils.lambda$getNoArgsConstructor$20(ClassUtils.java:559)
at java.base/java.util.Optional.orElseGet(Optional.java:369)
at com.hotels.transformer.utils.ClassUtils.getNoArgsConstructor(ClassUtils.java:549)
at com.hotels.beans.transformer.TransformerImpl.injectValues(TransformerImpl.java:125)
... 36 more
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidBeanException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformThrowsExceptionWhenMutableBeanHasNoDefaultConstructor -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformThrowsNoExceptionIfTheDestinationObjectValuesAreNotValidAndTheValidationIsDisabled()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformThrowsNoExceptionIfTheDestinationObjectValuesAreNotValidAndTheValidationIsDisabled" finished-at="2020-07-30T15:19:04 CEST" duration-ms="30" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformThrowsNoExceptionIfTheDestinationObjectValuesAreNotValidAndTheValidationIsDisabled -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationOnAnExistingDestinationWorksProperly()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationOnAnExistingDestinationWorksProperly" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationOnAnExistingDestinationWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationWithFieldTransformationWorksProperly(java.lang.String, java.lang.String, java.lang.Object)[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationWithFieldTransformationWorksProperly" data-provider="dataTransformationTesting" finished-at="2020-07-30T15:19:04 CEST" duration-ms="2" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the field transformation returns the expected values.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[name]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[goofy]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationWithFieldTransformationWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationWithFieldTransformationWorksProperly(java.lang.String, java.lang.String, java.lang.Object)[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformationWithFieldTransformationWorksProperly" data-provider="dataTransformationTesting" finished-at="2020-07-30T15:19:04 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the field transformation returns the expected values even if null.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[name]]>
              </value>
            </param>
            <param index="2">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationWithFieldTransformationWorksProperly -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformerDoesNotSetsTheDefaultValueForPrimitiveTypeField()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformerDoesNotSetsTheDefaultValueForPrimitiveTypeField" finished-at="2020-07-30T15:19:04 CEST" duration-ms="10" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformerDoesNotSetsTheDefaultValueForPrimitiveTypeField -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformerDoesNotThrowExceptionIfAFieldIsMissingAndTheDefaultValueSetIsEnabled()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformerDoesNotThrowExceptionIfAFieldIsMissingAndTheDefaultValueSetIsEnabled" finished-at="2020-07-30T15:19:04 CEST" duration-ms="3" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformerDoesNotThrowExceptionIfAFieldIsMissingAndTheDefaultValueSetIsEnabled -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformerIsAbleToCopyObjectsWithoutFieldButWithGetterMethods()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformerIsAbleToCopyObjectsWithoutFieldButWithGetterMethods" finished-at="2020-07-30T15:19:04 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformerIsAbleToCopyObjectsWithoutFieldButWithGetterMethods -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="5" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformerIsAbleToCopyObjectsWithoutRequiredMethods()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformerIsAbleToCopyObjectsWithoutRequiredMethods" finished-at="2020-07-30T15:19:04 CEST" duration-ms="4" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformerIsAbleToCopyObjectsWithoutRequiredMethods -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="beforeMethod" finished-at="2020-07-30T15:19:04 CEST" duration-ms="6" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformerThrowsExceptionIfAFieldIsMissingAndThePrimitiveTypeConversionIsEnabled()[pri:0, instance:com.hotels.beans.transformer.MutableObjectTransformationTest@6d60899e]" started-at="2020-07-30T15:19:04 CEST" name="testTransformerThrowsExceptionIfAFieldIsMissingAndThePrimitiveTypeConversionIsEnabled" finished-at="2020-07-30T15:19:05 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformerThrowsExceptionIfAFieldIsMissingAndThePrimitiveTypeConversionIsEnabled -->
      </class> <!-- com.hotels.beans.transformer.MutableObjectTransformationTest -->
      <class name="com.hotels.beans.transformer.BuilderObjectTransformationTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:54 CEST" name="beforeClass" finished-at="2020-07-30T15:18:54 CEST" duration-ms="51" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:54 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:58 CEST" duration-ms="4021" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationThroughBuilder(java.lang.String, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="testTransformationThroughBuilder" data-provider="transformationThroughBuilderTesting" finished-at="2020-07-30T15:18:58 CEST" duration-ms="605" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that a Mutable bean, containing a custom Builder is correctly transformed]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithBuilder]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationThroughBuilder -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:58 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationThroughBuilder(java.lang.String, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="testTransformationThroughBuilder" data-provider="transformationThroughBuilderTesting" finished-at="2020-07-30T15:18:58 CEST" duration-ms="12" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that a Mutable bean, containing a custom Builder with multiple constructors, is correctly transformed]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooWithBuilderMultipleConstructor]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationThroughBuilder -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:58 CEST" duration-ms="2" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationThroughBuilder(java.lang.String, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="testTransformationThroughBuilder" data-provider="transformationThroughBuilderTesting" finished-at="2020-07-30T15:18:58 CEST" duration-ms="15" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that a Mixed bean, containing a Builder generated by lombok, is correctly transformed]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFooWithBuilder]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationThroughBuilder -->
        <test-method is-config="true" signature="beforeMethod()[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="beforeMethod" finished-at="2020-07-30T15:18:58 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeMethod -->
        <test-method signature="testTransformationThroughBuilder(java.lang.String, java.lang.Object, java.lang.Class)[pri:0, instance:com.hotels.beans.transformer.BuilderObjectTransformationTest@11eed657]" started-at="2020-07-30T15:18:58 CEST" name="testTransformationThroughBuilder" data-provider="transformationThroughBuilderTesting" finished-at="2020-07-30T15:18:58 CEST" duration-ms="11" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that an Immutable bean, containing a Builder generated by lombok with all mandatory fields, is correctly transformed]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[donald, duck], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooWithBuilder]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testTransformationThroughBuilder -->
      </class> <!-- com.hotels.beans.transformer.BuilderObjectTransformationTest -->
      <class name="com.hotels.beans.populator.PopulatorFactoryTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.populator.PopulatorFactoryTest@6415f61e]" started-at="2020-07-30T15:19:05 CEST" name="beforeClass" finished-at="2020-07-30T15:19:05 CEST" duration-ms="104" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testGetPopulatorReturnsTheExpectedResult(java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.beans.populator.PopulatorFactoryTest@6415f61e]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatorReturnsTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="6" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class [Ljava.lang.String;]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.populator.ArrayPopulator]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatorReturnsTheExpectedResult -->
        <test-method signature="testGetPopulatorReturnsTheExpectedResult(java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.beans.populator.PopulatorFactoryTest@6415f61e]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatorReturnsTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[interface java.util.List]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.populator.CollectionPopulator]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatorReturnsTheExpectedResult -->
        <test-method signature="testGetPopulatorReturnsTheExpectedResult(java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.beans.populator.PopulatorFactoryTest@6415f61e]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatorReturnsTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class com.hotels.beans.sample.FromFoo]]>
              </value>
            </param>
            <param index="1">
              <value is-null="true"/>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatorReturnsTheExpectedResult -->
        <test-method signature="testGetPopulatorReturnsTheExpectedResult(java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.beans.populator.PopulatorFactoryTest@6415f61e]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatorReturnsTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[interface java.util.Map]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.populator.MapPopulator]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatorReturnsTheExpectedResult -->
        <test-method signature="testGetPopulatorReturnsTheExpectedResult(java.lang.Class, java.lang.Class)[pri:0, instance:com.hotels.beans.populator.PopulatorFactoryTest@6415f61e]" started-at="2020-07-30T15:19:05 CEST" name="testGetPopulatorReturnsTheExpectedResult" data-provider="dataProvider" finished-at="2020-07-30T15:19:05 CEST" duration-ms="0" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[class java.util.Optional]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[class com.hotels.beans.populator.OptionalPopulator]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPopulatorReturnsTheExpectedResult -->
      </class> <!-- com.hotels.beans.populator.PopulatorFactoryTest -->
      <class name="com.hotels.beans.BeanUtilsTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="beforeClass" finished-at="2020-07-30T15:19:05 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testGetPrimitiveTypeConverterWorksProperly()[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testGetPrimitiveTypeConverterWorksProperly" finished-at="2020-07-30T15:19:05 CEST" duration-ms="1" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetPrimitiveTypeConverterWorksProperly -->
        <test-method signature="testGetTransformerFunctionWorksProperly(java.lang.String, java.util.function.Function)[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testGetTransformerFunctionWorksProperly" data-provider="dataStaticTransformationTesting" finished-at="2020-07-30T15:19:05 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the transformer function returned is able to transform the given object.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.BeanUtils$$Lambda$396/0x0000000800481c40@295e224a]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTransformerFunctionWorksProperly -->
        <test-method signature="testGetTransformerFunctionWorksProperly(java.lang.String, java.util.function.Function)[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testGetTransformerFunctionWorksProperly" data-provider="dataStaticTransformationTesting" finished-at="2020-07-30T15:19:05 CEST" duration-ms="4" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[Test that the transformer function returned is able to transform the given object with the given transformer.]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[com.hotels.beans.BeanUtils$$Lambda$397/0x0000000800482040@422367b0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTransformerFunctionWorksProperly -->
        <test-method signature="testGetTransformerThrowsExceptionIfTheBeanTransformerIsNull()[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testGetTransformerThrowsExceptionIfTheBeanTransformerIsNull" finished-at="2020-07-30T15:19:05 CEST" duration-ms="0" status="PASS">
          <exception class="java.lang.IllegalArgumentException">
            <message>
              <![CDATA[beanTransformer cannot be null!]]>
            </message>
            <full-stacktrace>
              <![CDATA[java.lang.IllegalArgumentException: beanTransformer cannot be null!
at com.hotels.transformer.validator.Validator.notNull(Validator.java:78)
at com.hotels.beans.BeanUtils.getTransformer(BeanUtils.java:57)
at com.hotels.beans.BeanUtilsTest.testGetTransformerThrowsExceptionIfTheBeanTransformerIsNull(BeanUtilsTest.java:85)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- java.lang.IllegalArgumentException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTransformerThrowsExceptionIfTheBeanTransformerIsNull -->
        <test-method signature="testGetTransformerWorksProperly()[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testGetTransformerWorksProperly" finished-at="2020-07-30T15:19:05 CEST" duration-ms="0" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testGetTransformerWorksProperly -->
        <test-method signature="testValidateThrowsExceptionIfTheGivenBeanIsInvalid()[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testValidateThrowsExceptionIfTheGivenBeanIsInvalid" finished-at="2020-07-30T15:19:05 CEST" duration-ms="1" status="PASS">
          <exception class="com.hotels.transformer.error.InvalidBeanException">
            <message>
              <![CDATA[com.hotels.beans.sample.immutable.ImmutableToFoo.list must not be null;com.hotels.beans.sample.immutable.ImmutableToFoo.nestedObjectList must not be null;com.hotels.beans.sample.immutable.ImmutableToFoo.nestedObject must not be null;com.hotels.beans.sample.immutable.ImmutableToFoo.id must not be null]]>
            </message>
            <full-stacktrace>
              <![CDATA[com.hotels.transformer.error.InvalidBeanException: com.hotels.beans.sample.immutable.ImmutableToFoo.list must not be null;com.hotels.beans.sample.immutable.ImmutableToFoo.nestedObjectList must not be null;com.hotels.beans.sample.immutable.ImmutableToFoo.nestedObject must not be null;com.hotels.beans.sample.immutable.ImmutableToFoo.id must not be null
at com.hotels.transformer.validator.ValidatorImpl.validate(ValidatorImpl.java:84)
at com.hotels.beans.BeanUtilsTest.testValidateThrowsExceptionIfTheGivenBeanIsInvalid(BeanUtilsTest.java:149)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
at java.base/java.lang.reflect.Method.invoke(Method.java:566)
at org.testng.internal.MethodInvocationHelper.invokeMethod(MethodInvocationHelper.java:134)
at org.testng.internal.TestInvoker.invokeMethod(TestInvoker.java:597)
at org.testng.internal.TestInvoker.invokeTestMethod(TestInvoker.java:173)
at org.testng.internal.MethodRunner.runInSequence(MethodRunner.java:46)
at org.testng.internal.TestInvoker$MethodInvocationAgent.invoke(TestInvoker.java:816)
at org.testng.internal.TestInvoker.invokeTestMethods(TestInvoker.java:146)
at org.testng.internal.TestMethodWorker.invokeTestMethods(TestMethodWorker.java:146)
at org.testng.internal.TestMethodWorker.run(TestMethodWorker.java:128)
at java.base/java.util.ArrayList.forEach(ArrayList.java:1540)
at org.testng.TestRunner.privateRun(TestRunner.java:766)
at org.testng.TestRunner.run(TestRunner.java:587)
at org.testng.SuiteRunner.runTest(SuiteRunner.java:384)
at org.testng.SuiteRunner.runSequentially(SuiteRunner.java:378)
at org.testng.SuiteRunner.privateRun(SuiteRunner.java:337)
at org.testng.SuiteRunner.run(SuiteRunner.java:286)
at org.testng.SuiteRunnerWorker.runSuite(SuiteRunnerWorker.java:53)
at org.testng.SuiteRunnerWorker.run(SuiteRunnerWorker.java:96)
at org.testng.TestNG.runSuitesSequentially(TestNG.java:1187)
at org.testng.TestNG.runSuitesLocally(TestNG.java:1109)
at org.testng.TestNG.runSuites(TestNG.java:1039)
at org.testng.TestNG.run(TestNG.java:1007)
at org.apache.maven.surefire.testng.TestNGExecutor.run(TestNGExecutor.java:135)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.executeMulti(TestNGDirectoryTestSuite.java:193)
at org.apache.maven.surefire.testng.TestNGDirectoryTestSuite.execute(TestNGDirectoryTestSuite.java:94)
at org.apache.maven.surefire.testng.TestNGProvider.invoke(TestNGProvider.java:146)
at org.apache.maven.surefire.booter.ForkedBooter.invokeProviderInSameClassLoader(ForkedBooter.java:384)
at org.apache.maven.surefire.booter.ForkedBooter.runSuitesInProcess(ForkedBooter.java:345)
at org.apache.maven.surefire.booter.ForkedBooter.execute(ForkedBooter.java:126)
at org.apache.maven.surefire.booter.ForkedBooter.main(ForkedBooter.java:418)
]]>
            </full-stacktrace>
          </exception> <!-- com.hotels.transformer.error.InvalidBeanException -->
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidateThrowsExceptionIfTheGivenBeanIsInvalid -->
        <test-method signature="testValidateWorksProperly()[pri:0, instance:com.hotels.beans.BeanUtilsTest@65eb76cd]" started-at="2020-07-30T15:19:05 CEST" name="testValidateWorksProperly" finished-at="2020-07-30T15:19:05 CEST" duration-ms="9" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testValidateWorksProperly -->
      </class> <!-- com.hotels.beans.BeanUtilsTest -->
      <class name="com.hotels.beans.performance.PerformanceTest">
        <test-method is-config="true" signature="beforeClass()[pri:0, instance:com.hotels.beans.performance.PerformanceTest@5a0bef24]" started-at="2020-07-30T15:19:05 CEST" name="beforeClass" finished-at="2020-07-30T15:19:05 CEST" duration-ms="23" status="PASS">
          <reporter-output>
          </reporter-output>
        </test-method> <!-- beforeClass -->
        <test-method signature="testCopyPropertiesGetsCompletedInTheExpectedTime(double, int, java.lang.Object, java.lang.Class, double)[pri:0, instance:com.hotels.beans.performance.PerformanceTest@5a0bef24]" started-at="2020-07-30T15:19:05 CEST" name="testCopyPropertiesGetsCompletedInTheExpectedTime" data-provider="dataPerformanceTest" finished-at="2020-07-30T15:19:05 CEST" duration-ms="142" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFooSimple(name=Goofy, id=1234, active=true)]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooSimple]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[0.2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPropertiesGetsCompletedInTheExpectedTime -->
        <test-method signature="testCopyPropertiesGetsCompletedInTheExpectedTime(double, int, java.lang.Object, java.lang.Class, double)[pri:0, instance:com.hotels.beans.performance.PerformanceTest@5a0bef24]" started-at="2020-07-30T15:19:05 CEST" name="testCopyPropertiesGetsCompletedInTheExpectedTime" data-provider="dataPerformanceTest" finished-at="2020-07-30T15:19:06 CEST" duration-ms="911" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFooSubClass(surname=surname, phone=123456, check=true, amount=10)]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.mutable.MutableToFooSubClass]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPropertiesGetsCompletedInTheExpectedTime -->
        <test-method signature="testCopyPropertiesGetsCompletedInTheExpectedTime(double, int, java.lang.Object, java.lang.Class, double)[pri:0, instance:com.hotels.beans.performance.PerformanceTest@5a0bef24]" started-at="2020-07-30T15:19:06 CEST" name="testCopyPropertiesGetsCompletedInTheExpectedTime" data-provider="dataPerformanceTest" finished-at="2020-07-30T15:19:06 CEST" duration-ms="51" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFooSimple(name=Goofy, id=1234, active=true)]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSimple]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[0.2]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPropertiesGetsCompletedInTheExpectedTime -->
        <test-method signature="testCopyPropertiesGetsCompletedInTheExpectedTime(double, int, java.lang.Object, java.lang.Class, double)[pri:0, instance:com.hotels.beans.performance.PerformanceTest@5a0bef24]" started-at="2020-07-30T15:19:06 CEST" name="testCopyPropertiesGetsCompletedInTheExpectedTime" data-provider="dataPerformanceTest" finished-at="2020-07-30T15:19:06 CEST" duration-ms="499" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFooSubClass(surname=surname, phone=123456, check=true, amount=10)]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.immutable.ImmutableToFooSubClass]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPropertiesGetsCompletedInTheExpectedTime -->
        <test-method signature="testCopyPropertiesGetsCompletedInTheExpectedTime(double, int, java.lang.Object, java.lang.Class, double)[pri:0, instance:com.hotels.beans.performance.PerformanceTest@5a0bef24]" started-at="2020-07-30T15:19:06 CEST" name="testCopyPropertiesGetsCompletedInTheExpectedTime" data-provider="dataPerformanceTest" finished-at="2020-07-30T15:19:07 CEST" duration-ms="822" status="PASS">
          <params>
            <param index="0">
              <value>
                <![CDATA[1000.0]]>
              </value>
            </param>
            <param index="1">
              <value>
                <![CDATA[0]]>
              </value>
            </param>
            <param index="2">
              <value>
                <![CDATA[FromFoo(name=Goofy, id=1234, nestedObjectList=[FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}), FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}), FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}), FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}), FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}})], list=[9, 10, 7, 12, 4, 11, 3, 6, 5, 8, 1, 14, 2, 0, 13], nestedObject=FromSubFoo(name=Smith, phoneNumbers=[12345, 6892, 10873], sampleMap={donald=duck}, complexMap={donald=[duck]}, veryComplexMap={donald={donald=duck}}))]]>
              </value>
            </param>
            <param index="3">
              <value>
                <![CDATA[class com.hotels.beans.sample.mixed.MixedToFoo]]>
              </value>
            </param>
            <param index="4">
              <value>
                <![CDATA[1.0]]>
              </value>
            </param>
          </params>
          <reporter-output>
          </reporter-output>
        </test-method> <!-- testCopyPropertiesGetsCompletedInTheExpectedTime -->
      </class> <!-- com.hotels.beans.performance.PerformanceTest -->
    </test> <!-- Surefire test -->
  </suite> <!-- Surefire suite -->
</testng-results>
